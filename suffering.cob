IDENTIFICATION DIVISION.
PROGRAM-ID. SUFFERING.

DATA DIVISION.
WORKING-STORAGE SECTION.
	01 ACTUAL.
		02 Y OCCURS 8 TIMES.
			03 X OCCURS 4 TIMES.
				05 ELEM PIC 9(1) COMP.

	01 TRAINING.
		02 Y OCCURS 8 TIMES.
			03 X OCCURS 3 TIMES.
				05 ELEM PIC 9(1) COMP.

	01 LAYER_SIZE.
		02 ARRAY-SIZE OCCURS 5 TIMES.
			05 ELEM PIC 9(1) COMP.

	01 OUTPUTS.
		02 ARRAY-SIZE OCCURS 8 TIMES.
			05 ELEM PIC S9(5)V9(10) COMP-3.

	01 INPUTS.
		02 ARRAY-SIZE OCCURS 4 TIMES.
			05 ELEM PIC S9(1) COMP.

	01 OUTPUT_MAT.
		02 Y OCCURS 5 TIMES.
			03 X OCCURS 3 TIMES.
				05 ELEM PIC S9(5)V9(10) COMP-3.

	01 DELTA_ERR_MAT.
		02 Y OCCURS 5 TIMES.
			03 X OCCURS 3 TIMES.
				05 ELEM PIC S9(5)V9(20) COMP-3.

	01 WEIGHT.
		02 W OCCURS 8 TIMES.
			03 Y OCCURS 5 TIMES.
				04 X OCCURS 3 TIMES.
					05 Z OCCURS 4 TIMES.
						06 ELEM PIC S9(2)V9(10) COMP-3.

	01 PREVWEIGHT.
		02 W OCCURS 8 TIMES.
			03 Y OCCURS 5 TIMES.
				04 X OCCURS 3 TIMES.
					05 Z OCCURS 4 TIMES.
						06 ELEM PIC S9(2)V9(10) COMP-3.

	01 CURRDATE PIC X(21).

	01 RAND_SEED PIC 9(10)V9(11).

	01 RAND_VAL PIC S9(2)V9(8).

	01 OUT_VAL PIC S9(5)V9(10).

	01 SUMVAL PIC S9(2)V9(10).

	01 OMAT PIC S9(5)V9(10).

	01 TARG PIC S9(5)V9(10).

	01 DERR PIC S9(5)V9(10).

	01 WEIGHT_OLD PIC S9(5)V9(15).

	01 WEIGHT_NEW PIC S9(5)V9(15).

	01 FF_HELPER_VAL PIC S9(5)V9(10).

	01 HD_HELPER_VAL PIC S9(5)V9(10).

	01 HD_HELPER_DEM PIC S9(5)V9(10).

	01 HD_HELPER_WM PIC S9(5)V9(10).

	01 M_HELPER_A PIC S9(5)V9(10).

	01 M_HELPER_B PIC S9(5)V9(10).

	01 W_HELPER_DERR PIC S9(5)V9(15).

	01 SQUARE PIC S9(4)V9(10).

	01 DIFFERENCE PIC S9(2)V9(10).

	01 ALPHA PIC S9(1)V9(3).

	01 BETA PIC S9(1)V9(3).

	01 THRESHOLD PIC S9(1)V9(8).

	01 MSE PIC S9(5)V9(10).

	01 MSE_OLD PIC S9(5)V9(10).

	01 MSE_COUNT PIC S9(3).

	01 I PIC S9(8).

	01 J PIC S9(8).

	01 K PIC S9(8).

	01 L PIC S9(8).

	01 M PIC S9(8).

	01 Q PIC S9(8).

	01 R PIC S9(8).

	01 RESA PIC S9(1).

	01 RESB PIC S9(1).

	01 RESC PIC S9(1).

	01 OUTA PIC S9(5)V9(10).

	01 OUTB PIC S9(5)V9(10).

	01 OUTC PIC S9(5)V9(10).

	01 LAYERCOUNT PIC S9(1).

	01 ITERATIONS PIC S9(8).

PROCEDURE DIVISION.
	DISPLAY 'Compiled!'.
	PERFORM INIT-ACTUAL.
	PERFORM INIT-TRAINING.
	PERFORM INIT-LAYER_SIZE.
	PERFORM SEED-WEIGHTS.
	PERFORM INIT-DELTA_ERR_MAT-AND-OUTPUT_MAT.
	MOVE 5 TO LAYERCOUNT.
	MOVE 9999 TO ITERATIONS.
	MOVE 0.01 TO BETA.
	MOVE 0.001 TO ALPHA.
	MOVE 0.0001 TO THRESHOLD.
	MOVE 1.0 TO MSE.
	MOVE 0.0 TO MSE_OLD.
	MOVE 0 TO MSE_COUNT.
	
	*>TRAIN THE NET
	PERFORM TRAIN-THE-NET.
	DISPLAY 'MSE: ' MSE

	*>TEST THE NET
	PERFORM TEST-THE-NET.

	PERFORM ROUND-RESULTS.
	DISPLAY 'RESULTS:'.
	PERFORM DISPLAY-RESULTS.
	STOP RUN.

TEST-THE-NET.
	PERFORM VARYING L FROM 1 BY 1 UNTIL L > 8
		MOVE ELEM OF TRAINING(L,1) TO ELEM OF INPUTS(1)
		MOVE ELEM OF TRAINING(L,2) TO ELEM OF INPUTS(2)
		MOVE ELEM OF TRAINING(L,3) TO ELEM OF INPUTS(3)
		PERFORM FEED-FORWARD
		MOVE ELEM OF OUTPUT_MAT(LAYERCOUNT,1) TO ELEM OF OUTPUTS(L)
	END-PERFORM.

TRAIN-THE-NET.
	PERFORM VARYING L FROM 1 BY 1 UNTIL L > 8
		MOVE ELEM OF ACTUAL(L,1) TO ELEM OF INPUTS(1)
		MOVE ELEM OF ACTUAL(L,2) TO ELEM OF INPUTS(2)
		MOVE ELEM OF ACTUAL(L,3) TO ELEM OF INPUTS(3)
		MOVE ELEM OF ACTUAL(L,4) TO ELEM OF INPUTS(4)
		PERFORM VARYING M FROM 1 BY 1 UNTIL M > ITERATIONS
			MOVE 5.0 TO OUT_VAL

			PERFORM BACK-PROPAGATE

			MOVE ELEM OF OUTPUT_MAT(LAYERCOUNT,1) TO OUT_VAL
			MOVE OUT_VAL TO ELEM OF OUTPUTS(L)

			PERFORM MEANS-SQUARED-ERROR
			*>DISPLAY 'MSE: ' MSE
			IF MSE = MSE_OLD
				ADD 1 TO MSE_COUNT
				IF MSE_COUNT > 100
					PERFORM SEED-WEIGHTS
					MOVE 0 TO MSE_COUNT
				END-IF
			END-IF
			MOVE MSE TO MSE_OLD

			IF MSE < THRESHOLD
				DISPLAY 'DONE at ' M ' of ' L
				EXIT PERFORM
			END-IF
		END-PERFORM
		IF MSE < THRESHOLD
			DISPLAY 'DONE at ' M ' of ' L
			EXIT PERFORM
		END-IF
		MOVE 1 TO M
	END-PERFORM.
	MOVE 1 TO L.

DISPLAY-RESULTS.
	PERFORM VARYING I FROM 1 BY 1 UNTIL I > 8
		MOVE ELEM OF TRAINING(I,1) TO RESA
		MOVE ELEM OF TRAINING(I,2) TO RESB
		MOVE ELEM OF TRAINING(I,3) TO RESC
		DISPLAY ' ' RESA ' ' RESB ' ' RESC ' ' ELEM OF OUTPUTS(I)
	END-PERFORM.
	MOVE 1 TO I.

ROUND-RESULTS.
	PERFORM VARYING I FROM 1 BY 1 UNTIL I > 8
		IF ELEM OF OUTPUTS(I) > 0.5
			MOVE 1.0 TO ELEM OF OUTPUTS(I)
		ELSE
			MOVE 0.0 TO ELEM OF OUTPUTS(I)
		END-IF
	END-PERFORM.

SIGMOID.
	COMPUTE SUMVAL = 1.0 / (1.0 + FUNCTION EXP(-SUMVAL)).

MEANS-SQUARED-ERROR.
	MOVE 0.0 TO DIFFERENCE.
	MOVE 0.0 TO SQUARE.
	PERFORM VARYING I FROM 1 BY 1 UNTIL I > 8
		COMPUTE DIFFERENCE = (ELEM OF ACTUAL(I,4)) - (ELEM OF OUTPUTS(I))
		COMPUTE SQUARE = SQUARE + DIFFERENCE**2.0
	END-PERFORM.
	COMPUTE MSE = (SQUARE / I)**0.5.
	MOVE 1 TO I.

FEED-FORWARD.
	PERFORM VARYING I FROM 1 BY 1 UNTIL I > ELEM OF LAYER_SIZE(1)
		MOVE ELEM OF INPUTS(I) TO ELEM OF OUTPUT_MAT(1,I)
	END-PERFORM.
	MOVE 1 TO I.

	PERFORM VARYING I FROM 2 BY 1 UNTIL I > LAYERCOUNT
		PERFORM VARYING J FROM 1 BY 1 UNTIL J > ELEM OF LAYER_SIZE(I)
			MOVE 0.0 TO SUMVAL
			PERFORM VARYING K FROM 1 BY 1 UNTIL K > ELEM OF LAYER_SIZE(I - 1)
				PERFORM FEED-FORWARD-HELPER-A
				COMPUTE SUMVAL = SUMVAL + FF_HELPER_VAL
			END-PERFORM
			MOVE 1 TO K
			PERFORM FEED-FORWARD-HELPER-B
			PERFORM SIGMOID
			MOVE SUMVAL TO ELEM OF OUTPUT_MAT(I,J)
		END-PERFORM
		MOVE 1 TO J
	END-PERFORM.
	MOVE 1 TO I.

FEED-FORWARD-HELPER-A.
	MOVE ELEM OF OUTPUT_MAT((I - 1),K) TO FF_HELPER_VAL.
	COMPUTE FF_HELPER_VAL = FF_HELPER_VAL * ELEM OF WEIGHT(L,I,J,K).

FEED-FORWARD-HELPER-B.
	COMPUTE SUMVAL=SUMVAL+ELEM OF WEIGHT(L,I,J,ELEM OF LAYER_SIZE(I - 1)).

FIND-OUTPUT-DELTAS.
	PERFORM VARYING I FROM 1 BY 1 UNTIL I > ELEM OF LAYER_SIZE(LAYERCOUNT)
		MOVE ELEM OF OUTPUT_MAT(LAYERCOUNT,I) TO OMAT
		MOVE ELEM OF ACTUAL(L,4) TO TARG

		MOVE OMAT TO SUMVAL *>this sucks.
		PERFORM SIGMOID
		COMPUTE DERR = (TARG - OMAT) * (SUMVAL * (1.0 - SUMVAL))

		MOVE DERR TO ELEM OF DELTA_ERR_MAT(LAYERCOUNT,I)
	END-PERFORM.
	MOVE 1 TO I.

FIND-HIDDEN-DELTAS.
	COMPUTE Q = LAYERCOUNT - 1.
	PERFORM VARYING I FROM Q BY -1 UNTIL I < 1
		PERFORM VARYING J FROM 1 BY 1 UNTIL J > ELEM OF LAYER_SIZE(I)
		MOVE 0.0 TO SUMVAL
		MOVE 0.0 TO DERR
			PERFORM VARYING K FROM 1 BY 1 UNTIL K > ELEM OF LAYER_SIZE(I + 1)
				PERFORM HIDDEN-DELTAS-HELPER
				COMPUTE SUMVAL = SUMVAL + HD_HELPER_VAL
			END-PERFORM
			MOVE 1 TO K
			MOVE ELEM OF OUTPUT_MAT(I,J) TO HD_HELPER_VAL
			COMPUTE DERR = SUMVAL * HD_HELPER_VAL * (1.0 - HD_HELPER_VAL)
			MOVE DERR TO ELEM OF DELTA_ERR_MAT(I,J)
		END-PERFORM
		MOVE 1 TO J
	END-PERFORM.
	MOVE 1 TO I.

HIDDEN-DELTAS-HELPER.
	MOVE ELEM OF DELTA_ERR_MAT((I + 1),K) TO HD_HELPER_DEM.
	MOVE ELEM OF WEIGHT(L,(I + 1),K,J) TO HD_HELPER_WM.
	COMPUTE HD_HELPER_VAL = HD_HELPER_DEM * HD_HELPER_WM.

APPLY-MOMENTUM.
	PERFORM VARYING I FROM 2 BY 1 UNTIL I > LAYERCOUNT
		PERFORM VARYING J FROM 1 BY 1 UNTIL J > ELEM OF LAYER_SIZE(I)
			PERFORM VARYING K FROM 1 BY 1 UNTIL K > ELEM OF LAYER_SIZE(I - 1)
				PERFORM MOMENTUM-HELPER-A
			END-PERFORM
			MOVE 1 TO K
			PERFORM MOMENTUM-HELPER-B
		END-PERFORM
		MOVE 1 TO J
	END-PERFORM.
	MOVE 1 TO I.

MOMENTUM-HELPER-A.
	COMPUTE M_HELPER_A = ALPHA * ELEM OF PREVWEIGHT(L,I,J,K).
	COMPUTE M_HELPER_A = ELEM OF WEIGHT(L,I,J,K) - M_HELPER_A.
	MOVE M_HELPER_A TO ELEM OF WEIGHT(L,I,J,K).
	
	MOVE 0.0 TO M_HELPER_A.

MOMENTUM-HELPER-B.
	MOVE ELEM OF LAYER_SIZE(I - 1) TO Q.
	COMPUTE M_HELPER_B = ALPHA * ELEM OF PREVWEIGHT(L,I,J,Q).
	COMPUTE M_HELPER_B = ELEM OF WEIGHT(L,I,J,Q) - M_HELPER_B
	MOVE M_HELPER_B TO ELEM OF WEIGHT(L,I,J,Q).

	MOVE 1 TO Q.

ADJUST-WEIGHTS.
	PERFORM VARYING I FROM 2 BY 1 UNTIL I > LAYERCOUNT
		PERFORM VARYING J FROM 1 BY 1 UNTIL J > ELEM OF LAYER_SIZE(I)
			PERFORM VARYING K FROM 1 BY 1 UNTIL K > ELEM OF LAYER_SIZE(I - 1)
				PERFORM WEIGHT-HELPER-A
			END-PERFORM
			MOVE 1 TO K
			PERFORM WEIGHT-HELPER-B
		END-PERFORM
		MOVE 1 TO J
	END-PERFORM.
	MOVE 1 TO I.

WEIGHT-HELPER-A.
	MOVE ELEM OF DELTA_ERR_MAT(I,J) TO W_HELPER_DERR.
	COMPUTE WEIGHT_OLD = BETA * W_HELPER_DERR * ELEM OF OUTPUT_MAT((I - 1),K).
	MOVE WEIGHT_OLD TO ELEM OF PREVWEIGHT(L,I,J,K).

	COMPUTE WEIGHT_NEW = ELEM OF WEIGHT(L,I,J,K) + WEIGHT_OLD.
	MOVE WEIGHT_NEW TO ELEM OF WEIGHT(L,I,J,K).

	MOVE 0.0 TO WEIGHT_OLD.
	MOVE 0.0 TO WEIGHT_NEW.
	MOVE 0.0 TO W_HELPER_DERR.

WEIGHT-HELPER-B.
	MOVE ELEM OF DELTA_ERR_MAT(I,J) TO W_HELPER_DERR.
	COMPUTE WEIGHT_OLD = BETA * W_HELPER_DERR.
	MOVE WEIGHT_OLD TO ELEM OF PREVWEIGHT(L,I,J,(ELEM OF LAYER_SIZE(I - 1))).

	MOVE ELEM OF WEIGHT(L,I,J,(ELEM OF LAYER_SIZE(I - 1))) TO WEIGHT_NEW.
	COMPUTE WEIGHT_NEW = WEIGHT_NEW + WEIGHT_OLD.
	MOVE WEIGHT_NEW TO ELEM OF WEIGHT(L,I,J,(ELEM OF LAYER_SIZE(I - 1))).

	MOVE 0.0 TO WEIGHT_OLD.
	MOVE 0.0 TO WEIGHT_NEW.
	MOVE 0.0 TO W_HELPER_DERR.

BACK-PROPAGATE.
	PERFORM FEED-FORWARD.

	PERFORM FIND-OUTPUT-DELTAS.

	PERFORM FIND-HIDDEN-DELTAS.

	PERFORM APPLY-MOMENTUM.

	PERFORM ADJUST-WEIGHTS.

INIT-ACTUAL.
	MOVE ZERO TO ACTUAL.
	MOVE 0 TO ELEM OF ACTUAL(1,1).
	MOVE 0 TO ELEM OF ACTUAL(1,2).
	MOVE 0 TO ELEM OF ACTUAL(1,3).
	MOVE 0 TO ELEM OF ACTUAL(1,4).
	MOVE 0 TO ELEM OF ACTUAL(2,1).
	MOVE 0 TO ELEM OF ACTUAL(2,2).
	MOVE 1 TO ELEM OF ACTUAL(2,3).
	MOVE 1 TO ELEM OF ACTUAL(2,4).
	MOVE 0 TO ELEM OF ACTUAL(3,1).
	MOVE 1 TO ELEM OF ACTUAL(3,2).
	MOVE 0 TO ELEM OF ACTUAL(3,3).
	MOVE 1 TO ELEM OF ACTUAL(3,4).
	MOVE 0 TO ELEM OF ACTUAL(4,1).
	MOVE 1 TO ELEM OF ACTUAL(4,2).
	MOVE 1 TO ELEM OF ACTUAL(4,3).
	MOVE 0 TO ELEM OF ACTUAL(4,4).
	MOVE 1 TO ELEM OF ACTUAL(5,1).
	MOVE 0 TO ELEM OF ACTUAL(5,2).
	MOVE 0 TO ELEM OF ACTUAL(5,3).
	MOVE 1 TO ELEM OF ACTUAL(5,4).
	MOVE 1 TO ELEM OF ACTUAL(6,1).
	MOVE 0 TO ELEM OF ACTUAL(6,2).
	MOVE 1 TO ELEM OF ACTUAL(6,3).
	MOVE 0 TO ELEM OF ACTUAL(6,4).
	MOVE 1 TO ELEM OF ACTUAL(7,1).
	MOVE 1 TO ELEM OF ACTUAL(7,2).
	MOVE 0 TO ELEM OF ACTUAL(7,3).
	MOVE 0 TO ELEM OF ACTUAL(7,4).
	MOVE 1 TO ELEM OF ACTUAL(8,1).
	MOVE 1 TO ELEM OF ACTUAL(8,2).
	MOVE 1 TO ELEM OF ACTUAL(8,3).
	MOVE 1 TO ELEM OF ACTUAL(8,4).

INIT-TRAINING.
	MOVE ZERO TO TRAINING.
	MOVE 0 TO ELEM OF TRAINING(1,1).
	MOVE 0 TO ELEM OF TRAINING(1,2).
	MOVE 0 TO ELEM OF TRAINING(1,3).
	MOVE 0 TO ELEM OF TRAINING(2,1).
	MOVE 0 TO ELEM OF TRAINING(2,2).
	MOVE 1 TO ELEM OF TRAINING(2,3).
	MOVE 0 TO ELEM OF TRAINING(3,1).
	MOVE 1 TO ELEM OF TRAINING(3,2).
	MOVE 0 TO ELEM OF TRAINING(3,3).
	MOVE 0 TO ELEM OF TRAINING(4,1).
	MOVE 1 TO ELEM OF TRAINING(4,2).
	MOVE 1 TO ELEM OF TRAINING(4,3).
	MOVE 1 TO ELEM OF TRAINING(5,1).
	MOVE 0 TO ELEM OF TRAINING(5,2).
	MOVE 0 TO ELEM OF TRAINING(5,3).
	MOVE 1 TO ELEM OF TRAINING(6,1).
	MOVE 0 TO ELEM OF TRAINING(6,2).
	MOVE 1 TO ELEM OF TRAINING(6,3).
	MOVE 1 TO ELEM OF TRAINING(7,1).
	MOVE 1 TO ELEM OF TRAINING(7,2).
	MOVE 0 TO ELEM OF TRAINING(7,3).
	MOVE 1 TO ELEM OF TRAINING(8,1).
	MOVE 1 TO ELEM OF TRAINING(8,2).
	MOVE 1 TO ELEM OF TRAINING(8,3).

INIT-LAYER_SIZE.
	MOVE 3 TO ELEM OF LAYER_SIZE(1).
	MOVE 3 TO ELEM OF LAYER_SIZE(2).
	MOVE 3 TO ELEM OF LAYER_SIZE(3).
	MOVE 3 TO ELEM OF LAYER_SIZE(4).
	MOVE 1 TO ELEM OF LAYER_SIZE(5).

INIT-DELTA_ERR_MAT-AND-OUTPUT_MAT.
	PERFORM VARYING I FROM 1 BY 1 UNTIL I > 5
		PERFORM VARYING J FROM 1 BY 1 UNTIL J > 3
			MOVE 0.0 TO ELEM OF DELTA_ERR_MAT(I,J)
			MOVE 0.0 TO ELEM OF OUTPUT_MAT(I,J)
		END-PERFORM
	END-PERFORM.
	MOVE 1 TO I.
	MOVE 1 TO J.

SEED-WEIGHTS.
	PERFORM VARYING R FROM 1 BY 1 UNTIL R > 8
	    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 5
		    PERFORM VARYING J FROM 1 BY 1 UNTIL J > 3
			    PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
				    PERFORM RNG
				    MOVE RAND_VAL TO ELEM OF WEIGHT(R,I,J,K)
				    MOVE 0.0 TO ELEM OF PREVWEIGHT(R,I,J,K)
			    END-PERFORM
		    END-PERFORM
	    END-PERFORM
	END-PERFORM.
	MOVE 1 TO R.
    MOVE 1 TO I.
    MOVE 1 TO J.
    MOVE 1 TO K.

RNG.
	MOVE FUNCTION CURRENT-DATE TO CURRDATE
	COMPUTE RAND_SEED = FUNCTION NUMVAL(CURRDATE)
	COMPUTE RAND_VAL = FUNCTION RANDOM(RAND_SEED) * 1.0.
